name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
      - conor_machine_new

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: 
            ${{ secrets.DOCKER_USERNAME }}/shape-frontend:${{ steps.prep.outputs.build_id }}
            ${{ secrets.DOCKER_USERNAME }}/shape-frontend:latest

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: 
            ${{ secrets.DOCKER_USERNAME }}/shape-backend:${{ steps.prep.outputs.build_id }}
            ${{ secrets.DOCKER_USERNAME }}/shape-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate build ID
        id: prep
        run: |
          echo "build_id=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
          
      - name: Add host key to known_hosts
        run: ssh-keyscan -H ${{ secrets.TWOBROS_HOST_1 }} >> ~/.ssh/known_hosts

      - name: Deploy to TwoBros
        uses: appleboy/ssh-action@master
        with:
          host: ${{  secrets.TWOBROS_HOST_1 }}
          username: ${{ secrets.TWOBROS_USERNAME_1 }}
          key: ${{ secrets.DIGITAL_OCEAN_SSH_KEY }}
          script: |
            # Create a project directory in the user's home folder
            PROJECT_DIR="$HOME/tim-rotator"
            mkdir -p $PROJECT_DIR

            # Check if directory creation was successful
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "ERROR: Failed to create project directory $PROJECT_DIR"
              exit 1
            fi

            # Copy configuration files
            cat > $PROJECT_DIR/docker-compose.yml << 'EOL'
            $(cat docker-compose.prod.yml)
            EOL
            
            cat > $PROJECT_DIR/nginx.conf << 'EOL'
            $(cat nginx.conf)
            EOL
            
            # Create required directories
            mkdir -p $PROJECT_DIR/media
            mkdir -p $PROJECT_DIR/training_data
            
            # Login to Docker Hub (required for private images)
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_HUB_TOKEN }}'

            # Pull the latest images
            docker pull ${{ secrets.DOCKER_USERNAME }}/shape-frontend:${{ steps.prep.outputs.build_id }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/shape-backend:${{ steps.prep.outputs.build_id }}
            docker pull ollama/ollama:latest

            # Change to the project directory for docker-compose operations
            cd $PROJECT_DIR
            docker compose down || true

            # Clean up old images but only for this project
            docker image prune -f --filter "label=project=shape-rotator"
            
      
            # Start services with new images and injected environment variables
            DOMAIN="theshaperotator.com" \
            DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}" \
            ENVIRONMENT="production" \
            NEXT_PUBLIC_API_URL="https://theshaperotator.com/api" \
            DO_BUCKET_ID="${{ secrets.DO_BUCKET_ID }}" \
            DO_BUCKET_SECRET="${{ secrets.DO_BUCKET_SECRET }}" \
            DO_BUCKET_NAME="twobrosbucket" \
            BUILD_ID="${{ steps.prep.outputs.build_id }}" \
            PROJECT_DIR="$PROJECT_DIR" \
            docker compose up -d

            # Verify containers are running
            echo "Checking container status:"
            docker ps | grep shape

